@page "/"
@page "/sendsensordata"
@page "/sendsensordata/{sensortype}/{sensorvalue}"
@page "/sendsensordata/{sensortype}/{sensorvalue}/{sensorvalue2}/{sensorvalue3}"
@using BlazorSensorApp.Shared
@using System.Net.Http
@inject HttpClient Http

@inject NavigationManager NavigationManager

<h1>Send Sensor Values to IoTHub</h1>

<p>Auto starts the Service if not running.</p>


@if (!SensorAvailable)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm OnValidSubmit=@Send Model="@_Sensor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <tr>
                <td align="right" valign="middle"><label><i>No:&nbsp;</i></label></td>
                <td valign="middle"><b>@_Sensor.No</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><label><i>Id:&nbsp;</i></label></td>
                <td valign="middle"><b>@_Sensor.Id</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><label><i>TimeStamp:&nbsp;</i></label></td>
                <td valign="middle"><b>@_Sensor.TimeStamp</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><label><i>Sensor Type:&nbsp;</i></label></td>
                <td valign="middle">
                    <InputSelect @bind-Value="_Sensor.SensorType">
                        @foreach (var typ in Enum.GetValues(typeof(SensorType)))
                            {
                            <option value="@typ">@typ</option>
                            }
                    </InputSelect>
                </td>
            </tr>
            @if (_Sensor.SensorType == SensorType.accelerometer)
            {
                <tr>
                    <td align="right" width="50px" valign="middle"><label for="Value"><i>Accelerometer (X,Y,Z):&nbsp;</i></label></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value1 class="form-control" id="Value1" PlaceHolder="X value." /></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value2 class="form-control" id="Value2" PlaceHolder="Y value." /></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value3 class="form-control" id="Value3" PlaceHolder="Z value." /></td>
                </tr>
            }
            else if (_Sensor.SensorType == SensorType.environment)
            {
                <tr>
                    <td align="right" width="50px" valign="middle"><label for="Value"><i>Environment:&nbsp;</i></label></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value1 class="form-control" id="Value4" PlaceHolder="Temperature value." /></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value2 class="form-control" id="Value5" PlaceHolder="Humidity value." /></td>
                    <td valign="middle" width="80px">&nbsp;<InputNumber @bind-Value=@value3 class="form-control" id="Value6" PlaceHolder="Pressure value." /></td>
                </tr>
            }
            else if (_Sensor.SensorType == SensorType.sswitch)
            {

                <tr>
                    <td align="right" valign="middle"><label for="Switch"><i>Value:&nbsp;</i></label></td>
                    <td valign="middle"><InputCheckbox @bind-Value=@_Sensor.State class="form-control" id="Switch" PlaceHolder="Switch off and on" /></td>
                </tr>
            }
            else
            {

                <tr>
                    <td align="right" valign="middle"><label for="Value"><i>Value:&nbsp;</i></label></td>
                    <td valign="middle"><InputNumber @bind-Value=@_Sensor.Value class="form-control" id="Value" PlaceHolder="Please enter a decimal value." /></td>
                </tr>
            }


            <tr><td><input type="submit" class="btn btn-primary" value="Send" /></td><td></td></tr>
            <tr><td align="right"><i>Result:&nbsp:</i></td><td><font color="Blue"><b>@Result</b></font></td></tr>
        </table>
    </EditForm>


}

@code {
    [Parameter]
    public string sensortype { get; set; }
    [Parameter]
    public string sensorvalue { get; set; }
    [Parameter]
    public string sensorvalue2 { get; set; }
    [Parameter]
    public string sensorvalue3 { get; set; }

    //@onselectionchange="@(() => { StateHasChanged(); })"

    char decimalPointSubChar = Sensor.DecimalPointSubChar;

    double? value1 = null;
    double? value2 = null;
    double? value3 = null;

    bool accelerometer { get; set; } = false;
    string Result = "Loading";

    private bool SensorAvailable { get; set; } = false;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
    }

    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //Http.PostAsJsonAsync<bool>("Sensor", false).GetAwaiter();
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
        NavigationManager.LocationChanged -= LocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += LocationChanged;

        var result = await Http.PostAsJsonAsync<bool>("Sensor", true);
        Result = "Started";
        StateHasChanged();

        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor = new Sensor { Id = guid.ToString(), TimeStamp = TimeStamp };
        _Sensor.SensorType = SensorType.accelerometer;
        _Sensor.No = Sensor.Count;
        if (!string.IsNullOrEmpty(sensortype))
        {
            object obj;
            if (Enum.TryParse(typeof(SensorType), sensortype, true, out obj))
            {
                _Sensor.SensorType = (SensorType)obj;
            }
        }
        _Sensor.Value = 0.0;
        if (!string.IsNullOrEmpty(sensorvalue))
        {
            double val;
            sensorvalue = sensorvalue.ToUpper().Replace('X', '.');
            if (double.TryParse(sensorvalue, out val))
                _Sensor.Value = val;
        }
        if ((_Sensor.SensorType == SensorType.accelerometer) || (_Sensor.SensorType == SensorType.environment))
        {
            value1 = _Sensor.Value;
            _Sensor.Value = null;

            if (!string.IsNullOrEmpty(sensorvalue2))
            {
                double val;
                sensorvalue2 = sensorvalue2.ToUpper().Replace('X', '.');
                if (double.TryParse(sensorvalue2, out val))
                    value2 = val;
                else
                    value2 = 0.0;
            }
            if (!string.IsNullOrEmpty(sensorvalue3))
            {
                double val;
                sensorvalue3 = sensorvalue3.ToUpper().Replace('X', '.');
                if (double.TryParse(sensorvalue3, out val))
                    value3 = val;
                else
                    value3 = 0.0;
            }
        }
        SensorAvailable = true;
        StateHasChanged();
    }

    private Sensor _Sensor { get; set; }

    private async Task Send()
    {
        Result = "Busy";
        StateHasChanged();
        //accelerometer = !accelerometer;
        //StateHasChanged();
        if ((_Sensor.SensorType == SensorType.accelerometer) || (_Sensor.SensorType == SensorType.environment))
        {
            _Sensor.Values = new List<double> { (double)value1, (double)value2, (double)value3 };
        }
        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor.No = ++Sensor.Count;
        _Sensor.Id = guid.ToString();
        _Sensor.TimeStamp = TimeStamp;
        var result = await Http.PostAsJsonAsync<Sensor>("Sensor", _Sensor);
        System.Diagnostics.Debug.WriteLine(result.StatusCode);
        Result = result.StatusCode.ToString();
        StateHasChanged();
    }

    private void Fred(MouseEventArgs mouseEventArgs)
    {
        //accelerometer = !accelerometer;
        StateHasChanged();
    }

}
